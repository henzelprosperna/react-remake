name: Deploy Dockerized React App to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build

      - name: Log in to AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com

      - name: Create ECR Repository
        run: |
          aws ecr create-repository --repository-name react-auto-deploy || echo "Repository already exists"

      - name: Build Docker image
        run: docker build -t react-auto-deploy:1 .

      - name: Tag Docker image
        run: docker tag react-auto-deploy:1 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com/react-auto-deploy:1

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com/react-auto-deploy:1

      - name: Create ECS Task Execution Role
        run: |
          aws iam create-role --role-name ecsTaskExecutionRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ecs-tasks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          
          aws iam attach-role-policy --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

      - name: Register ECS Task Definition for Fargate
        run: |
          aws ecs register-task-definition \
            --family task-auto-deploy \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu '1024' \
            --memory '3072' \
            --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
            --container-definitions '[{
              "name": "react-auto-deploy",
              "image": "'${{ secrets.AWS_ACCOUNT_ID }}'.dkr.ecr.ap-southeast-2.amazonaws.com/react-auto-deploy:1",
              "essential": true,
              "portMappings": [{
                "containerPort": 80,
                "hostPort": 80
              }]
            }]'

      - name: Create ECS Cluster
        run: |
          aws ecs create-cluster --cluster-name cluster-auto-deploy || echo "Cluster already exists"

      - name: Create ECS Service
        run: |
          aws ecs create-service \
            --cluster cluster-auto-deploy \
            --service-name service-auto-deploy \
            --task-definition task-auto-deploy \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration 'awsvpcConfiguration={subnets=[subnet-06cdecd7974c2b4ec],securityGroups=[sg-0ab975de274ee05d4],assignPublicIp=ENABLED}' \
            --region ap-southeast-2 || echo "Service already exists"

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster cluster-auto-deploy \
            --service service-auto-deploy \
            --task-definition task-auto-deploy \
            --force-new-deployment \
            --region ap-southeast-2
